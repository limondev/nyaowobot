
import telebot
from telebot.util import extract_arguments
from telebot.types import Message
import random
import requests
import schedule
import time
from config import TELEGRAM_API_TOKEN, api_key, pzpi_id
bot = telebot.TeleBot(TELEGRAM_API_TOKEN)



@bot.message_handler(commands=['start', 'help'])
def send_kawaii_instructions(message):
    instructions = (
        "Konnichiwa~! To make your message kawaii, simply type /kawaii followed by your message. Also you can reply and quote this command.\n"
        "For example: /kawaii Hello, how are you? UwU\n"
        "Also, U can ask this bot for weather in your city, just type /weather followed by name of your city :3\n"
        "For example: /weather Kharkiv\n"
        "If you want to watch some anime, but don`t know which one exactly, you can use /randomanime OwO\n"
        "If your friend forgot to change keyboard layout and you don`t understand, what is he saying, you can always use /translate.\n"
        "Also you can reply and quote this command.\n"
        "If you wanna tell smth important to the chat, you can use /alert\n"
        "Author: @limoncello62"
    )
    bot.reply_to(message, instructions)


@bot.message_handler(commands=['kawaii'])
def kawaii_command(message: Message):
    user_message = extract_arguments(message.text)
    if user_message:
        answer = user_message
    elif message.reply_to_message:
        if message.quote and message.quote.text:
            answer = message.quote.text
        elif message.reply_to_message.text:
            answer = message.reply_to_message.text
        else:
            answer = "Nya~! The message that you replied to doesn't have any text."
    else:
        answer = "Nya~! Please provide a message after the /kawaii command."
    bot.reply_to(message, make_kawaii(answer))

def make_kawaii(user_message: str):
    emoticons = ["Nya!", "OwO", "UwU", ":3", "<3", ";3", ">_<", "><", "^-^", "^^", "·µî·µï·µî", "nyaaaa~", ">w<", ">‚àá<", '>:3', ">~<", '‚âΩ^‚Ä¢‚©ä‚Ä¢^‚âº', "‚âß‚ó°‚â¶"]
    random_emoticon = random.choice(emoticons)

    if random_emoticon in ["UwU", "OwO"]:
        for letter in ['s', 'l', 'r', 'x']:
            user_message = user_message.replace(letter, "w")

    return user_message + " " + random_emoticon


@bot.message_handler(commands=['weather'])
def get_weather(message):
    try:
        city = message.text.split('/weather ', 1)[1]
        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}'
        response = requests.get(url)
        weather_data = response.json()

        if 'main' in weather_data and 'weather' in weather_data:
            main_weather = weather_data['weather'][0]['main']
            description = weather_data['weather'][0]['description']
            wind_speed = weather_data['wind']['speed']
            temperature_kelvin = weather_data['main']['temp']
            feels_like_kelvin = weather_data['main']['feels_like']
            rain_probability = weather_data.get('rain', {}).get('1h', 0)
            snow_probability = weather_data.get('snow', {}).get('1h', 0)

            temperature_celsius = temperature_kelvin - 273.15
            feels_like_celsius = feels_like_kelvin - 273.15
            emoji = ''
            if "Clear" in main_weather:
                emoji = "‚òÄÔ∏è"
            elif "Clouds" in main_weather:
                emoji = "‚òÅÔ∏è"
            elif "Rain" in main_weather:
                emoji = "üåßÔ∏è"
            elif "Snow" in main_weather:
                emoji = "‚ùÑÔ∏è"
            elif "Mist" in main_weather:
                emoji = "üå´Ô∏è"

            air_pollution_url = f'http://api.openweathermap.org/data/2.5/air_pollution?lat={weather_data["coord"]["lat"]}&lon={weather_data["coord"]["lon"]}&appid={api_key}'
            air_pollution_response = requests.get(air_pollution_url)
            air_pollution_data = air_pollution_response.json()

            if 'list' in air_pollution_data and len(air_pollution_data['list']) > 0:
                air_quality = air_pollution_data['list'][0]['main']['aqi']
                bot.reply_to(message, f'The weather in {city} is {main_weather} {emoji} ({description}) Nya!\n'
                                      f'Temperature: {temperature_celsius:.2f}¬∞C! :3\n'
                                      f'Feels like: {feels_like_celsius:.2f}¬∞C! UwU\n'
                                      f'Wind Speed: {wind_speed} m/s! üö©\n'
                                      f'Air Quality Index (AQI): {air_quality} OwO\n'
                                      f'Rain probability in next hour: {rain_probability*100:.0f}% üí¶\n'
                                      f'Snow probability in next hour: {snow_probability*100:.0f}% ‚òÉÔ∏è')
            else:
                bot.reply_to(message, f'Sorry, I couldn\'t retrieve the air pollution information for {city}. Nya~ :(')
        else:
            bot.reply_to(message, f'Sorry, I couldn\'t retrieve the weather information for {city}. Nya~ :(')

    except IndexError:
        bot.reply_to(message, 'Please provide a city name after the /weather command. UwU')
    except Exception as e:
        bot.reply_to(message, f'Something went wrong: {str(e)}. OwO')


@bot.message_handler(commands=['randomanime'])
def get_random_anime(message):
    try:
        url = f'https://api.jikan.moe/v4/random/anime'
        response = requests.get(url)
        randani = response.json()
        bot.reply_to(message, f"Your random anime: {randani['data']['url']}")
    except Exception as e:
        bot.reply_to(message, f'Something went wrong: {str(e)}. OwO')


@bot.message_handler(commands=['translate'])
def trans(message):
    user_message = extract_arguments(message.text)
    answer = ''
    if user_message:
        answer = user_message
    elif message.reply_to_message:
        if message.quote and message.quote.text:
            answer = message.quote.text
        elif message.reply_to_message.text:
            answer = message.reply_to_message.text
    if answer:
        answer = map_en_to_ua(answer)
    else:
        answer = "Please provide a message to translate after the /translate command or reply to the message you want to translate. :3"
    bot.reply_to(message, answer)


# function for mapping (translating) from english keyboard layout to ukrainian
def map_en_to_ua(text):
    english_to_ukrainian = { "~": "‚Ç¥", "!": "!", '@': '"', "#": "‚Ññ", "$": ";", "%": "%", "^": ":", "&": "?", "*": "*", "(": "(",")": ")", "_": "_", "+": "+",
                             "Q": "–ô", "W": "–¶", "E": "–£", "R": "–ö", "T": "–ï", "Y": "–ù", "U": "–ì", "I": "–®", "O": "–©", "P": "–ó", "{": "–•", "}": "–á",
                             "A": "–§", "S": "–Ü", "D": "–í", "F": "–ê", "G": "–ü", "H": "–†", "J": "–û", "K": "–õ", "L": "–î", ":": "–ñ", '"': '–Ñ', "|": "/",
                             "Z": "–Ø", "X": "–ß", "C": "–°", "V": "–ú", "B": "–ò", "N": "–¢", "M": "–¨", "<": "–ë", ">": "–Æ", "?": ",",
                             "`": "'", "1": "1", "2": "2", "3": "3", "4": "4", "5": "5", "6": "6", "7": "7", "8": "8", "9": "9", "0": "0", "-": "-", "=": "=",
                             "q": "–π", "w": "—Ü", "e": "—É", "r": "–∫", "t": "–µ", "y": "–Ω", "u": "–≥", "i": "—à", "o": "—â", "p": "–∑", "[": "—Ö", "]": "—ó",
                             "a": "—Ñ", "s": "—ñ", "d": "–≤", "f": "–∞", "g": "–ø", "h": "—Ä", "j": "–æ", "k": "–ª", "l": "–¥", ";": "–∂", "'": "—î", "\\": "\\",
                             "z": "—è", "x": "—á", "c": "—Å", "v": "–º", "b": "–∏", "n": "—Ç", "m": "—å", ",": "–±", ".": "—é", "/": "." }
    # subfunction for mapping characters
    def map_character(char):
        return english_to_ukrainian.get(char, char)

    mapped = "".join(map_character(letter) for letter in text)
    return mapped


@bot.message_handler(commands=['alert', 'ALERT'])
def kok(message):
    user_message = extract_arguments(message.text)
    if user_message:
        answer = user_message
    elif message.reply_to_message:
        if message.quote and message.quote.text:
            answer = message.quote.text
        elif message.reply_to_message.text:
            answer = message.reply_to_message.text
        else:
            answer = "THERE IS NO TEXT"
    else:
        answer = ''
    symbols_amount = random.randint(5, 50)
    answer += create_random_alert_symbols(symbols_amount)
    bot.reply_to(message, answer.upper())


def create_random_alert_symbols(amount:int) -> str:
    alert_symbols = ["‚ùóÔ∏è", "üîâ", "üÜò", "üó£", "‚ö†Ô∏è", "üî•"]
    return "".join(random.choice(alert_symbols) for i in range(amount))


# from this part there are some silly commands for my friends
@bot.message_handler(commands=['masshironayuki'])
def song(message):
    bot.reply_to(message, "https://www.youtube.com/watch?v=vKhpQTYOpUU")

@bot.message_handler(commands=['serhii'])
def maps(message):
    random_num = random.randint(1, 100)
    bot.reply_to(message, f"–ú–ê–ü–ò " * random_num)

@bot.message_handler(commands=['mykyta'])
def ro(message):
    random_num = random.randint(1, 100)
    bot.reply_to(message, "–†–æ–¥–∏—á—ñ " * random_num + "\nAnd complaining about —Å—Ç–∏–ø–µ–Ω–¥—ñ—è, of course")

@bot.message_handler(commands=['dimasik'])
def ro(message):
    random_num = random.randint(1, 100)
    bot.reply_to(message, f"–ü–ò–í–û " * random_num)

@bot.message_handler(commands=['liliia'])
def ipso(message):
    messages = ["–∫–∏—ó–≤—Å—Ç–∞—Ä –ª–µ–∂–∏—Ç—å –±–æ —Ü–µ —Ç–µ–∂ –æ–¥–∏–Ω —ñ–∑ –ø–ª–∞–Ω—ñ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ—ó —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó?", "–ö–∏—ó–≤ –≤—ñ–∑—å–º—É—Ç—å –∑–∞ 3 –¥–Ω—ñ", "–ê —Ö—Ç–æ –ø—ñ–¥–µ –≤—ñ–¥–≤–æ–π–æ–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ? –£ –Ω–∞—Å —Ç—É–ø–æ –Ω–µ–º–∞ –∫–æ–º—É", "–ù—É –∑–∞–≤—Ç—Ä–∞ —è–¥–µ—Ä–∫–æ—é –≤ º—ó–±–∞—Ç–∏ –ø–æ –ö–∏—î–≤—É –º–æ–∂—É—Ç—å", "–∑–±–∏–≤–∞—é—Ç—å —Ç—ñ–ª—å–∫–∏ –≤ –∫–∏—î–≤—ñ, —ñ–Ω—à—ñ –º—ñ—Å—Ç–∞ —Ö–∞–π —Ö–∞–≤–∞—é—Ç—å", "–û—Å—å –±–∏ —è–∫ –≤ –†–æ—Å—ñ—ó, —É —è–∫–∏—Ö —Å–∫–ª–∞–¥–∏ –≤ –°–∏–±—ñ—Ä—ñ, —ó–º —Ç–∞–º –≤—Å–µ –∑–∞ 10-14 –¥–Ω—ñ–≤ –∑ –ö–∏—Ç–∞—é –ø—Ä–∏—Ö–æ–¥–∏—Ç—å", "—Ü—ñ–∫–∞–≤–æ —Å–∫—ñ–∫–∏ –ª—é–¥–µ–π –ª–∏—à–∏—Ç—å—Å—è –≤ —É–∫—Ä–∞—ó–Ω—ñ –∫–æ–ª–∏ –≤—ñ–¥–∫—Ä–∏—é—Ç—å –∫–æ—Ä–¥–æ–Ω–∏", "–∂–∏–≤–µ–º–æ –Ω–∞ —Ä—ñ–≤–Ω—ñ —Ä–æ–∑–≤–∏—Ç–∫—É —É–≥–∞–Ω–¥–∏ —è–∫–æ—ó—Å—å", "–¥–∞ —ó–º —Ç—É—Ç 30 –∫–º –ø—Ä–æ–π—Ç–∏ —ñ –≤–æ–Ω–∏ –•–∞—Ä–∫—ñ–≤ –∑–∞—Ö–æ–ø–ª—è—Ç—å"]
    bot.reply_to(message, f"{random.choice(messages)}")

@bot.message_handler(commands=['sarcasm'])
def ro(message):
    bot.reply_to(message, "(–°–ê–†–ö–ê–ó–ú!!!!!!!!!)")

@bot.message_handler(commands=['ilya'])
def ro(message):
    bot.reply_to(message, "C# (–ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—Å—è —Å–∏ —à–∞—Ä–ø) ‚Äî –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ 1998‚Äî2001 –≥–æ–¥–∞—Ö –≥—Ä—É–ø–ø–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ Microsoft –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ê–Ω–¥–µ—Ä—Å–∞ –•–µ–π–ª—Å–±–µ—Ä–≥–∞ –∏ –°–∫–æ—Ç—Ç–∞ –í–∏–ª—å—Ç–∞—É–º–æ—Ç–∞ –∫–∞–∫ —è–∑—ã–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Microsoft .NET Framework –∏ .NET Core. –í–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –±—ã–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ECMA-334 –∏ ISO/IEC 23270. C# –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–µ–º—å–µ —è–∑—ã–∫–æ–≤ —Å C-–ø–æ–¥–æ–±–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º, –∏–∑ –Ω–∏—Ö –µ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–æ–∫ –∫ C++ –∏ Java. –Ø–∑—ã–∫ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —è–≤–Ω–æ–≥–æ –∏ –Ω–µ—è–≤–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–∞), –¥–µ–ª–µ–≥–∞—Ç—ã, –∞—Ç—Ä–∏–±—É—Ç—ã, —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å–≤–æ–π—Å—Ç–≤–∞, –æ–±–æ–±—â—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏ –º–µ—Ç–æ–¥—ã, –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã, –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–º—ã–∫–∞–Ω–∏–π, LINQ, –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XML. –ü–µ—Ä–µ–Ω—è–≤ –º–Ω–æ–≥–æ–µ –æ—Ç —Å–≤–æ–∏—Ö –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ ‚Äî —è–∑—ã–∫–æ–≤ C++, Delphi, –ú–æ–¥—É–ª–∞, Smalltalk –∏, –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, Java ‚Äî –°#, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏, –∑–∞—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–≤—à–∏–µ —Å–µ–±—è –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, C# –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç C++ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ (–º–µ–∂–¥—É —Ç–µ–º –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤).")

@bot.message_handler(commands=['rostik'])
def ipso(message):
    messages = ["–ö–ê–ö–ò–ú –±—É–¥–µ—Ç –ù–û–í–û–ï –ö–û–ù–¢–†–ù–ê–°–¢–£–ü–õ–ï–ù–ò–ï –£–∫—Ä–∞–∏–Ω—ã? –ü–û–î–†–û–ë–ù–û –æ –ü–õ–ê–ù–ê–• –í–°–£ –Ω–∞ 2024 –≥–æ–¥","–í–û–¢ –¢–ê–ö –û–†–£–ñ–ò–ï! –í–°–£ –Ω–∞—á–∞–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –ö ...", "–î–û–ù-–î–û–ù –ò–ì–†–ê–ï–¢ —Å –ö—Ä–µ–º–ª–µ–º? –†–ê–ó–ë–û–† –¢–£–ü–´–• –∑–∞—è–≤–ª–µ–Ω–∏–π –ö–ê–î–´–†–û–í–ê", "–ü—É—Ç–∏–Ω—É —Å—Ç–æ–∏—Ç –û–ü–ê–°–ê–¢–¨–°–Ø –≠–¢–û–ì–û ‚ö°Ô∏è –ü–æ—Å–ª–µ –í–´–ë–û–†–û–í 2024 –Ω–∞ –†–æ—Å—Å–∏—é –û–ë–†–£–®–ò–¢–°–Ø...", "–¢–û–ü-5 –•–ò–¢–û–í —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ü–†–û–ü–ê–ì–ê–ù–î–´: –∫–∞–∫–æ–π –ë–†–ï–î –Ω–µ—Å–ª–∏ –†–¢–´ –ü–£–¢–ò–ù–ê –≤ 2023", "–î–∞–≥–µ—Å—Ç–∞–Ω—Å–∫–∏–µ —É—á–µ–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –æ—á–∫–æ –±–∞—Ä–∞–Ω—É"]
    bot.reply_to(message, f"{random.choice(messages)}")

def tagi(user_ids):
    tags = ''
    for user_id in user_ids:
        tags += f'{user_id}\n'
    return tags

def split_tags(user_ids, chunk_size):
    for i in range(0, len(user_ids), chunk_size):
        yield user_ids[i:i + chunk_size]

@bot.message_handler(commands=['tag'])
def xoxly(message):
    tagged_users_chunks = list(split_tags(pzpi_id, 5))
    for chunk in tagged_users_chunks:
        bot.reply_to(message, f"–•–æ—Ö–ª–∏, –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–±—ñ—Ä!\n{tagi(chunk)}")

@bot.message_handler(commands=["randomshurup"])
def shurup(message: Message):
    shurup_data = ["–®—É—Ä—É–ø –∑ –ø–æ—Ç–∞–π–Ω–æ—é –≥–æ–ª–æ–≤–∫–æ—é –¥–ª—è —Ç–≤–µ—Ä–¥–∏—Ö –ø–æ—Ä—ñ–¥ –¥–µ—Ä–µ–≤–∏–Ω–∏ TORX", "–®—É—Ä—É–ø –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–Ω–∏–π –ø–æ –¥–µ—Ä–µ–≤—É", "–®—É—Ä—É–ø –∑ –ø–æ—Ç–∞–π–Ω–æ—é –≥–æ–ª–æ–≤–∫–æ—é –∑ —Ö—Ä–µ—Å—Ç–æ–ø–æ–¥—ñ–±–Ω–∏–º —à–ª—ñ—Ü–æ–º", "–®—É—Ä—É–ø –¥–ª—è –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω—É –¥–æ –¥–µ—Ä–µ–≤–∞ –Ω–∞ —Å—Ç—Ä—ñ—á—Ü—ñ –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–∏–π ESSVE", "–®—É—Ä—É–ø –∑ –ø–æ—Ç–∞–π–Ω–æ—é –≥–æ–ª–æ–≤–∫–æ—é –¥–ª—è —Ç–≤–µ—Ä–¥–∏—Ö –ø–æ—Ä—ñ–¥ –¥–µ—Ä–µ–≤–∏–Ω–∏ POZIDRIV (PZ)", "–®—É—Ä—É–ø –∑ –Ω–∞–ø—ñ–≤–∫—Ä—É–≥–ª–æ—é –≥–æ–ª–æ–≤–∫–æ—é –∑ —Ö—Ä–µ—Å—Ç–æ–ø–æ–¥—ñ–±–Ω–∏–º —à–ª—ñ—Ü–æ–º (–Ω–µ—Ä–∂–∞–≤—ñ–π–Ω–∞ —Å—Ç–∞–ª—å –ê2)", "–®—É—Ä—É–ø –¥–ª—è —Ç–≤–µ—Ä–¥–æ–≥–æ –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω—É –Ω–∞ —Å—Ç—Ä—ñ—á—Ü—ñ ESSVE —Ñ–æ—Å—Ñ–∞—Ç", "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –≥–≤–∏–Ω—Ç-—à—É—Ä—É–ø", "–®—É—Ä—É–ø - –∫–æ–Ω—Ñ—ñ—Ä–º–∞—Ç", "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —à—É—Ä—É–ø-—à—É—Ä—É–ø", "–®—É—Ä—É–ø –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–Ω–∏–π —Å–∞–º–æ—Å–≤–µ—Ä–ª—è—â–∏–π", "–®—É—Ä—É–ø –¥–ª—è –∑—à–∏–≤–∞–Ω–Ω—è –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω—É –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–∏–π", "–®—É—Ä—É–ø –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –±–µ—Ç–æ–Ω—É –ø—ñ–≤–∫—Ä—É–≥ / WAF"]
    shurup_links = ["https://fixpro.ua/image/cache/catalog/photo5195223043339826598-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo5390828558512927507-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo5406747236320261296-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/%D1%84%D0%BE%D1%82%D0%BA%D0%B8/%D0%A8%D1%83%D1%80%D1%83%D0%BF%D1%8B-%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B/%D0%A7%D0%B5%D1%80%D0%BD%D1%8B%D0%B5%20%D0%B8%20%D0%91%D0%BB%D0%BE%D1%85%D0%B0/735171-1000x1000.png", "https://fixpro.ua/image/cache/catalog/%D1%84%D0%BE%D1%82%D0%BA%D0%B8/%D0%A8%D1%83%D1%80%D1%83%D0%BF%D1%8B-%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B/%D0%A1%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B%20%D0%96%D0%B5%D0%BB,%D0%91%D0%B5%D0%BB,A2,%20%D0%A1%D1%84%D0%B5%D1%80%D0%B0%20%D0%94%D0%B5%D1%80+%D0%9C%D0%B5%D1%82/fixpro-samorez-dlya-tverdih-porod-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/333/fixpro_shurup_z_napivkug_golov_a2-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo_l/fix_pro_samorez_na_lente_phosphat-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/176-1000x1000.png", "https://fixpro.ua/image/cache/catalog/%20%D0%B4%D0%BB%D1%8F%20%D1%85%D0%B8%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B0%D0%BD%D0%BA%D0%B5%D1%80%D0%BE%D0%B2/2819708119_w640_h640_shurup-konfirmat-5-x-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/shurup-20-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/%D1%84%D0%BE%D1%82%D0%BA%D0%B8/%D0%A8%D1%83%D1%80%D1%83%D0%BF%D1%8B-%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B/%D0%A7%D0%B5%D1%80%D0%BD%D1%8B%D0%B5%20%D0%B8%20%D0%91%D0%BB%D0%BE%D1%85%D0%B0/fixpro-samorez_s-burom-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo_l/fixpro-samorez-essve-1000x1000.JPG", "https://fixpro.ua/image/cache/catalog/333/fixpro_waf_dlya_leg_beton-1000x1000.jpg"]
    shurup_dict = {shurup_data[i]: shurup_links[i] for i in range(min(len(shurup_data), len(shurup_links)))}
    random_key = random.choice(list(shurup_dict.keys()))
    bot.reply_to(message, f"[{random_key}]({shurup_dict[random_key]})", parse_mode='Markdown')

def send_random_screw():
    shurup_data = ["–®—É—Ä—É–ø –∑ –ø–æ—Ç–∞–π–Ω–æ—é –≥–æ–ª–æ–≤–∫–æ—é –¥–ª—è —Ç–≤–µ—Ä–¥–∏—Ö –ø–æ—Ä—ñ–¥ –¥–µ—Ä–µ–≤–∏–Ω–∏ TORX", "–®—É—Ä—É–ø –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–Ω–∏–π –ø–æ –¥–µ—Ä–µ–≤—É", "–®—É—Ä—É–ø –∑ –ø–æ—Ç–∞–π–Ω–æ—é –≥–æ–ª–æ–≤–∫–æ—é –∑ —Ö—Ä–µ—Å—Ç–æ–ø–æ–¥—ñ–±–Ω–∏–º —à–ª—ñ—Ü–æ–º", "–®—É—Ä—É–ø –¥–ª—è –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω—É –¥–æ –¥–µ—Ä–µ–≤–∞ –Ω–∞ —Å—Ç—Ä—ñ—á—Ü—ñ –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–∏–π ESSVE", "–®—É—Ä—É–ø –∑ –ø–æ—Ç–∞–π–Ω–æ—é –≥–æ–ª–æ–≤–∫–æ—é –¥–ª—è —Ç–≤–µ—Ä–¥–∏—Ö –ø–æ—Ä—ñ–¥ –¥–µ—Ä–µ–≤–∏–Ω–∏ POZIDRIV (PZ)", "–®—É—Ä—É–ø –∑ –Ω–∞–ø—ñ–≤–∫—Ä—É–≥–ª–æ—é –≥–æ–ª–æ–≤–∫–æ—é –∑ —Ö—Ä–µ—Å—Ç–æ–ø–æ–¥—ñ–±–Ω–∏–º —à–ª—ñ—Ü–æ–º (–Ω–µ—Ä–∂–∞–≤—ñ–π–Ω–∞ —Å—Ç–∞–ª—å –ê2)", "–®—É—Ä—É–ø –¥–ª—è —Ç–≤–µ—Ä–¥–æ–≥–æ –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω—É –Ω–∞ —Å—Ç—Ä—ñ—á—Ü—ñ ESSVE —Ñ–æ—Å—Ñ–∞—Ç", "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –≥–≤–∏–Ω—Ç-—à—É—Ä—É–ø", "–®—É—Ä—É–ø - –∫–æ–Ω—Ñ—ñ—Ä–º–∞—Ç", "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —à—É—Ä—É–ø-—à—É—Ä—É–ø", "–®—É—Ä—É–ø –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–Ω–∏–π —Å–∞–º–æ—Å–≤–µ—Ä–ª—è—â–∏–π", "–®—É—Ä—É–ø –¥–ª—è –∑—à–∏–≤–∞–Ω–Ω—è –≥—ñ–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω—É –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–∏–π", "–®—É—Ä—É–ø –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –±–µ—Ç–æ–Ω—É –ø—ñ–≤–∫—Ä—É–≥ / WAF"]
    shurup_links = ["https://fixpro.ua/image/cache/catalog/photo5195223043339826598-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo5390828558512927507-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo5406747236320261296-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/%D1%84%D0%BE%D1%82%D0%BA%D0%B8/%D0%A8%D1%83%D1%80%D1%83%D0%BF%D1%8B-%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B/%D0%A7%D0%B5%D1%80%D0%BD%D1%8B%D0%B5%20%D0%B8%20%D0%91%D0%BB%D0%BE%D1%85%D0%B0/735171-1000x1000.png", "https://fixpro.ua/image/cache/catalog/%D1%84%D0%BE%D1%82%D0%BA%D0%B8/%D0%A8%D1%83%D1%80%D1%83%D0%BF%D1%8B-%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B/%D0%A1%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B%20%D0%96%D0%B5%D0%BB,%D0%91%D0%B5%D0%BB,A2,%20%D0%A1%D1%84%D0%B5%D1%80%D0%B0%20%D0%94%D0%B5%D1%80+%D0%9C%D0%B5%D1%82/fixpro-samorez-dlya-tverdih-porod-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/333/fixpro_shurup_z_napivkug_golov_a2-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo_l/fix_pro_samorez_na_lente_phosphat-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/176-1000x1000.png", "https://fixpro.ua/image/cache/catalog/%20%D0%B4%D0%BB%D1%8F%20%D1%85%D0%B8%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85%20%D0%B0%D0%BD%D0%BA%D0%B5%D1%80%D0%BE%D0%B2/2819708119_w640_h640_shurup-konfirmat-5-x-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/shurup-20-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/%D1%84%D0%BE%D1%82%D0%BA%D0%B8/%D0%A8%D1%83%D1%80%D1%83%D0%BF%D1%8B-%D1%81%D0%B0%D0%BC%D0%BE%D1%80%D0%B5%D0%B7%D1%8B/%D0%A7%D0%B5%D1%80%D0%BD%D1%8B%D0%B5%20%D0%B8%20%D0%91%D0%BB%D0%BE%D1%85%D0%B0/fixpro-samorez_s-burom-1000x1000.jpg", "https://fixpro.ua/image/cache/catalog/photo_l/fixpro-samorez-essve-1000x1000.JPG", "https://fixpro.ua/image/cache/catalog/333/fixpro_waf_dlya_leg_beton-1000x1000.jpg"]
    shurup_dict = {shurup_data[i]: shurup_links[i] for i in range(min(len(shurup_data), len(shurup_links)))}
    random_key = random.choice(list(shurup_dict.keys()))
    message = f"–®—É—Ä—É–ø –¥–Ω—è: [{random_key}]({shurup_dict[random_key]})"
    bot.send_message(chat_id='-1001908899737', text=message, parse_mode='Markdown')



if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
    while True:
        schedule.every().day.at("12:46").do(send_random_screw)
        schedule.run_pending()
        time.sleep(1)